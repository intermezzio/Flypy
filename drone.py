from vector import Vector
from math import pi, cos, sin

class Drone():
    """
    Drone class.

    Attributes:
        yaw: The yaw of the drone
        pitch: The pitch of the drone
        roll: The roll of the drone
        pos: Current drone position as a vector
        velocity: Current velocity of the drone as a vector
        r: Radius of the drone rotors in m
        weight: Weight of the drone in g
        size: Size of the drone in m
    """
    def __init_(self,
                rotor_radius=15,
                weight=50,
                size=10):
        """
        Constructor.

        Parameters:
            rotor_radius: Radius of the drone rotors in m
            weight: Weight of the drone in g
            size: Size of the drone in m
        """
        self.yaw = 0
        self.pitch = 0
        self.roll = 0
        self.pos = Vector()
        self.velocity = Vector()
        self.r = rotor_radius
        self.weight = weight
        self.size = size
    
    def thrust(self,
               r_speed=8,
               drag_coef=0.05,
               air_density=1.225):
        """
        Calculates the thrust given current yaw / pitch / roll and returns a
        force vector.

        Parameters:
            r_speed: Rotational speed of the rotors
            drag_coef: Drag coefficent of the rotors
            air_density: Density of the air

        Returns:
            Vector: Force vector generated by the thrust of the rotors
        """
        rotor_force = drag_coef * air_density * pi * self.r ** 3 * r_speed
        total_force = rotor_force * 4
        force_matrix = np.array([[0], [0], [total_force]])

        roll_matrix = np.array([[cos(self.roll), 0, -sin(self.roll)],
                               [0, 1, 0],
                               [sin(self.roll), 0, cos(self.roll)]])
        force_matrix = np.matmul(roll_matrix, force_matrix)
        pitch_matrix = np.array([[1, 0, 0],
                                [0, cos(self.pitch), -sin(self.pitch)],
                                [0, sin(self.pitch), cos(self.pitch)]])
        force_matrix = np.matmul(pitch_matrix, force_matrix)
        yaw_matrix = np.array([[cos(self.yaw), sin(self.yaw), 0],
                              [-sin(self.yaw), cos(self.yaw), 0],
                              [0, 0, 1]])
        force_matrix = np.matmul(yaw_matrix, force_matrix)

        thrust = Vector(force_matrix[0], force_matrix[1], force_matrix[2])
        return thrust
